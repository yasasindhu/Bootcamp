{"version":3,"file":"main.05fdba2387d6eb263d72.hot-update.js","sources":["webpack:///./src/components/molecules/stepper/CustomStepper.js"],"sourcesContent":["import React from 'react';\nimport { makeStyles,withStyles } from '@material-ui/core/styles';\nimport {Button,Typography, Step, Stepper, StepLabel,StepConnector } from '@material-ui/core';\nimport customtheme from '../../theme';\nimport { ThemeProvider } from '@material-ui/styles';\n\nimport Select from '../select/select';\nimport SearchSkills from '../select field/select';\nimport  TextField   from '../TextField/TextField';\nimport Divider from '@material-ui/core/Divider';\n\n\nconst QontoConnector = withStyles({\n    active: {\n      '& $line': {\n        borderColor: '#ffffff',\n      },\n    },\n    completed: {\n      '& $line': {\n        borderColor: '#ffffff',\n      },\n    },\n    line: {\n      borderColor: '#ffffff',\n      borderTopWidth: 3,\n      borderRadius: 1,\n    },\n  })(StepConnector);\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      width: '100%',\n    },\n    button: {\n      // marginRight: theme.spacing(1),\n      // marginTop:'30px',\n      // marginTop: '80px',\n      // margingRight:'20px',\n      // marginLeft:'80px',\n    width: '136px',\n    height: '50px',\n    margin: '30px 20px 370px 80px',\n    borderRadius: '10px',\n    gap:''\n    },\n    instructions: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n    },\n    iconContainer: { // define styles for icon container\n        transform: 'scale(2)',\n    },\n    inputField:{\n    // border: '1.5px solid #5ac568',\n    // borderRadius: '6px',\n    paddingLeft:'4px',\n    width: '500px',\n  height: '60px',\n  margin: '20px 210px 0px 80px',\n  borderColor: ' #fff',\n  backgroundColor: '#fff',\n  borderRadius: '100px',\n  padding: '1px',\n  display: 'flex',\n  flexWrap: 'wrap',\n    },\n    stepperLabel:{\n      marginLeft:' 60px',\n    }\n\n    \n  }));\n\nexport default function HorizontalLinearStepper(props) {\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = React.useState(0);\n    const [skipped, setSkipped] = React.useState(new Set());\n   console.log(activeStep);\n\n    const steps = props.steps;\n  \n    const isStepOptional = (step) => {\n      return step === 1;\n    };\n  \n    const isStepSkipped = (step) => {\n      return skipped.has(step);\n    };\n  \n    const handleNext = () => {\n      let newSkipped = skipped;\n      if (isStepSkipped(activeStep)) {\n        newSkipped = new Set(newSkipped.values());\n        newSkipped.delete(activeStep);\n      }\n  \n      setActiveStep((prevActiveStep) => prevActiveStep + 1);\n      setSkipped(newSkipped);\n    };\n  \n    const handleBack = () => {\n      setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n  \n    const handleSkip = () => {\n      if (!isStepOptional(activeStep)) {\n        // You probably want to guard against something like this,\n        // it should never occur unless someone's actively trying to break something.\n        throw new Error(\"You can't skip a step that isn't optional.\");\n      }\n  \n      setActiveStep((prevActiveStep) => prevActiveStep + 1);\n      setSkipped((prevSkipped) => {\n        const newSkipped = new Set(prevSkipped.values());\n        newSkipped.add(activeStep);\n        return newSkipped;\n      });\n    };\n  \n    const handleReset = () => {\n      setActiveStep(0);\n    };\n   \n    return (\n    <ThemeProvider theme = {customtheme}>\n      <div data-testid = \"maindivincustomstepper\">\n            <Stepper data-testid = \"stepperincustomstepper\" className={classes. stepperLabel} activeStep={activeStep}  connector={<QontoConnector />}>\n            {steps.map((label, index) => {\n                const stepProps = {};\n                const labelProps = {};\n            \n                if (isStepSkipped(index)) {\n                stepProps.completed = false;\n                }\n                return (\n                <Step key={label} {...stepProps} data-testid = \"stepincustomstepper\">\n                    <StepLabel {...labelProps} ><Typography  variant=\"overline\" data-testid = \"steplabelincustomstepper\">{label}</Typography></StepLabel>\n                    \n                </Step>\n                );\n            })}\n            </Stepper>\n            <Divider  light/>\n        <div data-testid = \"div2customstepper\">\n       {activeStep==0 &&\n       \n       <div >\n       <TextField  />\n             </div>\n       }\n        {activeStep==1 && \n        <div>\n        {/* <Select handleOnClickBackButton=\n        {\n          handleBack}/> */}\n          <Select handleOnClickBackButton={()=>{\n            console.log(\"hi\");\n            handleBack()}} />\n\n\n        {/* <Button disabled={activeStep === 0} onClick={handleBack} className={classes.button}>\n                  Back\n                </Button> */}\n        </div>}\n        {activeStep==2 && \n        <SearchSkills \n          handleOnClickBackButton={()=>{\n            console.log(\"hi\");\n            handleBack()}} />\n          }\n          {activeStep === steps.length ? (\n            <div data-testid = \"div3incustomstepper\">\n              <Typography className={classes.instructions} data-testid = \"stepstypoincustomstepper\">\n                All steps completed - you&apos;re finished\n              </Typography>\n              <Button onClick={handleReset} className={classes.button} data-testid = \"resetbuttonincustomstepper\">\n                Reset\n              </Button>\n            </div>\n          ) : (\n            <div data-testid = \"div4incustomstepper\">\n              <div data-testid = \"div5incustomstepper\">\n                {/* <Button disabled={activeStep === 0} onClick={handleBack} className={classes.button}>\n                  Back\n                </Button> */}\n                {isStepOptional(activeStep) && (\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleSkip}\n                    className={classes.button}\n                    data-testid = \"finishincustomstepper\"\n                  >\n                    Skip\n                  </Button>\n                )}\n  \n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={handleNext}\n                  className={classes.button}\n                  data-testid = \"skipincustomstepper\"\n                >\n                  {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      </ThemeProvider>\n    );\n  }"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AACA;AAHA;AAXA;AAkBA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AAFA;AAIA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AADA;AArCA;AAAA;AA4CA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;AAdA;AAgBA;AAAA;AACA;AAAA;AAGA;AAAA;AAKA;AAIA;AACA;AACA;AAAA;AAFA;AAJA;AAeA;AACA;AACA;AAAA;AAHA;AAMA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAJA;AASA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AACA;AALA;AAAA;AAYA;AACA;AACA;AACA;AACA;AALA;AAAA;AAhBA;AADA;AArCA;AAlBA;AADA;AAyFA;AA5IA;;;;;;;;;;;;;;;;;A","sourceRoot":""}